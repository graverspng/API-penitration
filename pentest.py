import requests
import time

BASE_URL = "http://127.0.0.1:8000"

def brute_force_mfa(username):
    print(f"\n[!] Bruteforcing MFA for user: {username}")
    for code in range(100000, 100005):
        response = requests.post(
            f"{BASE_URL}/mfa",
            data={"username": username, "mfa_code": str(code)}
        )
        if response.status_code == 200:
            print(f"[+] MFA CRACKED! Code: {code}")
            return response.json()["access_token"]
    print("[-] MFA brute-force failed.")

def test_sql_injection():
    print("\n[!] Testing SQL Injection...")
    payload = {"username": "' OR 1=1 --", "password": "anything"}
    response = requests.post(f"{BASE_URL}/token", data=payload)
    if "blocked by WAF" in response.text:
        print("[+] WAF blocked SQLi (good!)")
    else:
        print("[-] SQLi vulnerability detected!")


def test_ssrf():
    print("\n[!] Testing SSRF...")
    response = requests.get(f"{BASE_URL}/secure-data?url=http://internal-server")
    if "blocked by WAF" in response.text:
        print("[+] WAF blocked SSRF (good!)")

def test_ddos():
    print("\n[!] Simulating DDoS...")
    for i in range(10):
        response = requests.get(f"{BASE_URL}/secure-data")
        if response.status_code == 429:
            print("[+] Rate limiting works (429 received)")
            break
        time.sleep(0.1)

def trigger_honeypot():
    print("\n[!] Triggering honeypot...")
    response = requests.get(f"{BASE_URL}/admin-backdoor")
    if "Nothing to see here" in response.text:
        print("[+] Honeypot logged the attack (check security.log)")

if __name__ == "__main__":
    print("[*] Starting penetration tests...")
    test_sql_injection()
    brute_force_mfa("admin")
    test_ssrf()
    test_ddos()
    trigger_honeypot()
    print("[*] Check security.log for attack traces.")